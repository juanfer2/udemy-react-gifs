{"version":3,"sources":["logo.svg","components/gyphy/GyphyContext.jsx","services/configServices.js","services/giftsServices.js","components/gyphy/defaults/GyphyImage.jsx","components/gyphy/defaults/GyphySearch.jsx","components/gyphy/Gyphy.jsx","components/gyphy/hooks/useFetchGyphy.jsx","components/gyphy/GyphyWrapper.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","GyphyContext","createContext","callFetch","a","url","method","data","headers","axios","searchGifs","category","encodeURI","rsp","images","map","img","id","title","downsized_medium","GyphyImageStyled","styled","div","GyphyImage","className","src","alt","srcSet","GyphySearch","setCategory","useState","search","setSearch","type","value","onChange","e","target","onClick","GyphyStyled","Gyphy","loanding","state","setState","useEffect","then","imgs","useFetchGyphy","categoy","image","key","GyphyWrapper","Provider","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,iGCE9BC,G,kBAAeC,wBAAc,K,oECG7BC,EAAS,uCAAG,uCAAAC,EAAA,6DAASC,EAAT,EAASA,IAAKC,EAAd,EAAcA,OAAd,IAAsBC,YAAtB,MAA4B,GAA5B,MAAgCC,eAAhC,MAAyC,GAAzC,oBAAkDC,IAAM,CAC7EH,SACAD,IALiB,iCAKCA,EAJP,4CAKXE,OACAC,aAJqB,2CAAH,sDCHTE,EAAU,uCAAG,WAAOC,GAAP,mBAAAP,EAAA,sEACND,EAAU,CAC1BG,OAAQ,MACRD,IAAI,YAAD,OAAeO,UAAWD,GAA1B,eAHmB,cAClBE,EADkB,OAMhBN,EAAUM,EAAVN,KACFO,EAASP,EAAKA,KAAKQ,KAAK,SAAAC,GAAQ,IAAD,EACnC,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXb,IAAG,UAAEW,EAAIF,cAAN,aAAE,EAAYK,iBAAiBd,QAXd,kBAcjBS,GAdiB,2CAAH,sD,wJCEvB,IAAMM,EAAmBC,IAAOC,IAAV,KAyBPC,MArBf,YAAmC,IAAdP,EAAa,EAAbA,IAAKE,EAAQ,EAARA,MACxB,OACE,kBAACE,EAAD,KACE,yBAAKI,UAAU,OACb,yBAAKC,IAAKT,EAAKU,IAAKR,EAAOS,OAAQT,KAErC,yBAAKM,UAAU,WACb,8BACGN,MCMIU,MAnBf,YAAqC,IAAfC,EAAc,EAAdA,YAAc,EACNC,mBAAS,IADH,mBAC3BC,EAD2B,KACnBC,EADmB,KAOlC,OACE,6BACE,2BAAOC,KAAK,OAAOC,MAAOH,EAAQI,SAAW,SAACC,GAAD,OAAOJ,EAAUI,EAAEC,OAAOH,UACvE,4BACAI,QAAU,WAPZT,EAAYE,KAMV,Y,wSCPN,IAAMQ,EAAclB,IAAOC,IAAV,KAiCFkB,MApBf,WAAkB,IAAD,EACiBV,mBAAS,IAD1B,mBACRnB,EADQ,KACEkB,EADF,OChBY,SAAClB,GAAc,IAAD,EAEfmB,mBAAS,CACjCvB,KAAM,GACNkC,UAAU,IAJ6B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAmBzC,OAZAC,qBAAU,WACIlC,EAAWC,GACnBkC,MAAK,SAAAC,GACPH,EAAS,2BACJD,GADG,IAENnC,KAAMuC,EACNL,UAAU,UAIb,CAAC9B,IAEG+B,EDAoBK,CAAcpC,GAAjCJ,EAHO,EAGPA,KACR,OAJe,EAGDkC,SACO,cAEnB,kBAACF,EAAD,kBAGE,kBAAC,EAAD,CAAcS,QAASrC,EAAUkB,YAAaA,IAE9C,yBAAKL,UAAU,aACZjB,EAAKQ,KAAI,SAACkC,GAAD,OACR,kBAAC,EAAD,CAAYC,IAAKD,EAAMhC,GAAID,IAAKiC,EAAM5C,IAAKa,MAAO+B,EAAM/B,cEnBnDiC,MARf,WACE,OACE,kBAAClD,EAAamD,SAAd,KACE,kBAAC,EAAD,QCWSC,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QCFc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79757699.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {createContext} from 'react'\n\nexport const GyphyContext = createContext({\n\n});","import axios from 'axios';\n\nconst BaseUrlGifts = 'https://api.giphy.com/v1/gifs/'\nconst APIKEY = '&api_key=A8xMXqzieIHmtO3BjGLAtf1daSSDAv8K'\n\nexport const callFetch = async ({ url, method, data ={}, headers ={} }) => axios({\n    method,\n    url: BaseUrlGifts+url+APIKEY,\n    data,\n    headers\n  })","import {callFetch} from './configServices'\n\nexport const searchGifs = async (category)=> {\n  const rsp = await callFetch({\n    method: 'GET', \n    url: `search?q=${ encodeURI( category ) }&limit=30`,\n  })\n\n  const { data } =  rsp\n  const images = data.data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  return images\n}","import React from 'react'\nimport PropTypes from 'prop-types';\n\nimport styled, { css, jsx } from '@emotion/styled'\nconst GyphyImageStyled = styled.div`\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.12), 0px 2px 10px rgba(0, 0, 0, 0.12)\n`;\n\nfunction GyphyImage({img, title}) {\n  return (\n    <GyphyImageStyled>\n      <div className=\"img\" >\n        <img src={img} alt={title} srcSet={title} />\n      </div>\n      <div className=\"content\" >\n        <span>\n          {title}\n        </span>\n      </div>\n    </GyphyImageStyled>\n  )\n}\n\nGyphyImage.propTypes = {\n  img: PropTypes.string.isRequired,\n  title: PropTypes.string\n}\n\n\nexport default GyphyImage\n","import React, {useState} from 'react'\nimport { searchGifs } from '../../../services/giftsServices'\n\nfunction GyphySearch({setCategory}) {\n  const [search, setSearch] = useState('')\n\n  const searchValue = () => {\n    setCategory(search)\n  }\n\n  return (\n    <div>\n      <input type=\"text\" value={search} onChange={ (e)=>  setSearch(e.target.value) }  />\n      <button\n      onClick={ ()=>  searchValue()}\n      >\n        Buscar\n      </button>\n    </div>\n  )\n}\n\nexport default GyphySearch\n","import React, {useState} from \"react\";\nimport styled, { css, jsx } from '@emotion/styled'\nimport { useFetchGyphy } from \"./hooks/useFetchGyphy\";\nimport GyphyImage from \"./defaults/GyphyImage\";\nimport GyphySearch from \"./defaults/GyphySearch\";\n\nconst GyphyStyled = styled.div`\n  .container{\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 1em;\n    img{\n      background-size: cover;\n      background-position: center;\n      width: 100%;\n    }\n  }\n`;\n\nfunction Gyphy() {\n  const [category, setCategory] = useState('')\n  // const { data, loanding } = useFetchGyphy(\"Are You Afraid of the Dark\");\n  const { data, loanding } = useFetchGyphy(category);\n  if (loanding) return \"Loanding...\";\n  return (\n    <GyphyStyled>\n      hola Gyphy\n\n      <GyphySearch  categoy={category} setCategory={setCategory} />\n      \n      <div className=\"container\">\n        {data.map((image) => (\n          <GyphyImage key={image.id} img={image.url} title={image.title} />\n        ))}\n      </div>\n    </GyphyStyled>\n  );\n}\n\nexport default Gyphy;\n","import { useState, useEffect } from 'react';\nimport { searchGifs } from '../../../services/giftsServices'\n\nexport const useFetchGyphy = (category) => {\n  \n  const [state, setState] = useState({\n    data: [],\n    loanding: true\n  })\n\n  useEffect(() => {\n    const rsp = searchGifs(category);\n    rsp.then(imgs => {\n      setState({\n        ...state,\n        data: imgs,\n        loanding: false\n      })\n    })\n\n  }, [category])\n\n  return state;\n\n}","import React from 'react'\nimport {GyphyContext} from './GyphyContext'\n\nimport Gyphy from './Gyphy';\n\nfunction GyphyWrapper() {\n  return (\n    <GyphyContext.Provider>\n      <Gyphy/>\n    </GyphyContext.Provider>\n  )\n}\n\nexport default GyphyWrapper\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nimport Gyphy from './components/gyphy/GyphyWrapper';\n\n\n// Api GiPhy\n// fRUjVwbz2XHUZlM1zzU0OujHB0GCOQAw\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Gyphy/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}